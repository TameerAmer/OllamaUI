name: Simple Deploy to EC2

on:
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      YOLO_VERSION: ${{ steps.parse_env.outputs.YOLO_VERSION }}
      YOLO_IMG_TAG: ${{ steps.parse_env.outputs.YOLO_IMG_TAG }}
      OLLAMA_VERSION: ${{ steps.parse_env.outputs.OLLAMA_VERSION }}
      OLLAMA_UI_IMG_TAG: ${{ steps.parse_env.outputs.OLLAMA_UI_IMG_TAG }}
      POSTGRES_VERSION: ${{ steps.parse_env.outputs.POSTGRES_VERSION }}

    steps:
    - name: Get code
      uses: actions/checkout@v4

    - name: Build and push Docker image
      run: |
        echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        TAG="${{ github.sha }}-$(date +%Y%m%d-%H%M%S)"
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ollama:$TAG .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/ollama:$TAG
        echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

    - name: Copy docker-compose file to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "docker-compose.yml"
        target: "/home/ubuntu/"

    - name: Copy .env.compose file to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        source: ".env.compose"
        target: "/home/ubuntu/"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ubuntu/
          sudo mkdir -p uploads/original uploads/predicted data/db
          docker compose --env-file .env.compose down
          echo "" >> .env.compose
          echo "OLLAMA_UI_IMG_TAG=${{ env.IMAGE_TAG }}" >> .env.compose
          docker compose --env-file .env.compose up -d

    - id: save_env
      name: Save deployed environment variables (fetch from EC2)
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ubuntu/
          grep -E '^(YOLO_VERSION|YOLO_IMG_TAG|OLLAMA_VERSION|OLLAMA_UI_IMG_TAG|POSTGRES_VERSION)=' .env.compose
      # ðŸ‘‡ capture stdout into GitHub Actions step output
      register: output

    - id: parse_env
      name: Parse env values into job outputs
      run: |
        echo "${{ steps.save_env.outputs.stdout }}" > env_values.txt
        while IFS='=' read -r key value; do
          echo "$key=$value" >> $GITHUB_OUTPUT
        done < env_values.txt

  selenium-matrix-tests:
    needs: deploy
    runs-on: ubuntu-latest
    env:
      YOLO_VERSION: ${{ needs.deploy.outputs.YOLO_VERSION }}
      YOLO_IMG_TAG: ${{ needs.deploy.outputs.YOLO_IMG_TAG }}
      OLLAMA_VERSION: ${{ needs.deploy.outputs.OLLAMA_VERSION }}
      OLLAMA_UI_IMG_TAG: ${{ needs.deploy.outputs.OLLAMA_UI_IMG_TAG }}
      POSTGRES_VERSION: ${{ needs.deploy.outputs.POSTGRES_VERSION }}
    strategy:
      matrix:
        browser: [chrome, firefox]
        resolution: 
          - { name: 'desktop-full', width: 1920, height: 1080 }
          - { name: 'laptop', width: 1366, height: 768 }
          - { name: 'mobile', width: 375, height: 667 }
      fail-fast: false
    name: Test ${{ matrix.browser }} - ${{ matrix.resolution.name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        repository: TameerAmer/OllamaUITesting
        token: ${{ secrets.UI_TESTING_GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Chrome and ChromeDriver
      if: matrix.browser == 'chrome'
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Install Firefox binary and GeckoDriver
      if: matrix.browser == 'firefox'
      run: |
        sudo apt-get update
        sudo apt-get install -y wget tar
        sudo snap remove firefox || true
        wget -O firefox.tar.xz "https://download.mozilla.org/?product=firefox-latest&os=linux64&lang=en-US"
        tar xJf firefox.tar.xz
        sudo mv firefox /opt/firefox
        sudo ln -s /opt/firefox/firefox /usr/local/bin/firefox
        wget https://github.com/mozilla/geckodriver/releases/latest/download/geckodriver-v0.36.0-linux64.tar.gz
        tar -xvzf geckodriver-v0.36.0-linux64.tar.gz
        sudo mv geckodriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/geckodriver

    - name: Run Selenium tests
      env:
        HEADLESS: true
        BROWSER: ${{ matrix.browser }}
        SCREEN_WIDTH: ${{ matrix.resolution.width }}
        SCREEN_HEIGHT: ${{ matrix.resolution.height }}
        OLLAMA_URL: http://${{ secrets.EC2_HOST }}:3000/
        TEST_NAME: ${{ matrix.browser }}-${{ matrix.resolution.name }}
        ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
        YOLO_VERSION: ${{ env.YOLO_VERSION }}
        YOLO_IMG_TAG: ${{ env.YOLO_IMG_TAG }}
        OLLAMA_VERSION: ${{ env.OLLAMA_VERSION }}
        OLLAMA_UI_IMG_TAG: ${{ env.OLLAMA_UI_IMG_TAG }}
        POSTGRES_VERSION: ${{ env.POSTGRES_VERSION }}
      run: |
        mkdir -p allure-results
        pytest --alluredir=allure-results tests/

    - name: Upload Allure results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results-${{ matrix.browser }}-${{ matrix.resolution.name }}
        path: allure-results/
        retention-days: 30

  allure-report:
    runs-on: ubuntu-latest
    needs: selenium-matrix-tests
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all Allure results
      uses: actions/download-artifact@v4
      with:
        pattern: allure-results-*
        path: allure-results-downloaded
        merge-multiple: false

    - name: Merge all results into single directory
      run: |
        mkdir -p allure-results
        for dir in allure-results-downloaded/*/; do
          if [ -d "$dir" ]; then
            cp -r "$dir"* allure-results/ 2>/dev/null || true
          fi
        done

    - name: Generate and Deploy Allure Report
      uses: simple-elf/allure-report-action@master
      with:
        allure_results: allure-results
        allure_report: allure-report
        gh_pages: gh-pages
        allure_history: allure-history
        keep_reports: 20

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.UI_TESTING_GITHUB_TOKEN }}
        publish_dir: allure-history
